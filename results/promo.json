{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Local variable naming convention",
  "severity": "Moderate",
  "comment": "Local variable name 'EDITOR_CONFIG_KEYS' should start with a lowercase letter",
  "detailsInfo": "Reports local variables that do not follow the naming conventions.\n\nYou can specify the required pattern in the inspection options.\n\n[Recommended naming conventions](https://kotlinlang.org/docs/coding-conventions.html#function-names): it has to start with a lowercase letter, use camel case and no underscores.\n\n**Example:**\n\n\n      fun fibonacciNumber(index: Int): Long = when(index) {\n          0 -> 0\n          else -> {\n              // does not follow naming conventions: contains underscore symbol (`_`)\n              var number_one: Long = 0\n              // does not follow naming conventions: starts with an uppercase letter\n              var NUMBER_TWO: Long = 1\n              // follow naming conventions: starts with a lowercase letter, use camel case and no underscores.\n              var numberThree: Long = number_one + NUMBER_TWO\n\n              for(currentIndex in 2..index) {\n                  numberThree = number_one + NUMBER_TWO\n                  number_one = NUMBER_TWO\n                  NUMBER_TWO = numberThree\n              }\n              numberThree\n          }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "build.gradle.kts",
      "language": "kotlin",
      "line": 53,
      "offset": 9,
      "length": 18,
      "code": {
        "startLine": 51,
        "length": 18,
        "offset": 71,
        "surroundingCode": "\n  configure<com.diffplug.gradle.spotless.SpotlessExtension> {\n    val EDITOR_CONFIG_KEYS: Set<String> = hashSetOf(\n      \"ij_kotlin_imports_layout\",\n      \"indent_size\","
      }
    }
  ],
  "attributes": {
    "module": "MVI_Coroutines_Flow",
    "inspectionName": "LocalVariableName"
  },
  "hash": "afdc2335270c6d99b0ae13295632efc7cfec74daab44e91e4002932b89218e8d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Property 'VALUES' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "domain/src/main/java/com/hoc/flowmvi/domain/model/UserValidationError.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 18,
        "length": 6,
        "offset": 85,
        "surroundingCode": "     * See [KT-48872](https://youtrack.jetbrains.com/issue/KT-48872)\n     */\n    val VALUES: List<UserValidationError> = values().asList()\n\n    val VALUES_SET: NonEmptySet<UserValidationError> = VALUES.toNonEmptySetOrNull()!!"
      }
    }
  ],
  "attributes": {
    "module": "MVI_Coroutines_Flow.domain.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "8e03fba3ef3d35170437c1e67d429b0bb1b37b9d77c17ed42250f04e7c372e42"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type alias \"Mapper\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "core/src/main/java/com/hoc/flowmvi/core/Mapper.kt",
      "language": "kotlin",
      "line": 3,
      "offset": 11,
      "length": 6,
      "code": {
        "startLine": 1,
        "length": 6,
        "offset": 40,
        "surroundingCode": "package com.hoc.flowmvi.core\n\ntypealias Mapper<T, R> = (T) -> R\n"
      }
    }
  ],
  "attributes": {
    "module": "MVI_Coroutines_Flow.core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "d360bb0f895d6d3fda4e76101743183d9f5aaad6adae113dca04bb8686ab2376"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"selfReferenced\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "core/src/main/java/com/hoc/flowmvi/core/selfReference.kt",
      "language": "kotlin",
      "line": 84,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 82,
        "length": 14,
        "offset": 19,
        "surroundingCode": " * ```\n */\nfun <T> selfReferenced(initializer: () -> T) = SelfReference(initializer())\n"
      }
    }
  ],
  "attributes": {
    "module": "MVI_Coroutines_Flow.core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "8039966dfa7a9b6786c5d4e67de3dc3523e3199ffc5fad0148e30842ef805af8"
}]}
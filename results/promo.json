{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Private property naming convention",
  "severity": "Moderate",
  "comment": "Private property name 'EMAIL_ADDRESS_REGEX' should not contain underscores in the middle or the end",
  "detailsInfo": "Reports private property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nprivate property names should start with a lowercase letter and use camel case.\nOptionally, underscore prefix is allowed but only for **private** properties.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val _My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val _myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "domain/src/main/java/com/hoc/flowmvi/domain/model/User.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 13,
      "length": 19,
      "code": {
        "startLine": 62,
        "length": 19,
        "offset": 99,
        "surroundingCode": "private const val MIN_LENGTH_FIRST_NAME = 3\nprivate const val MIN_LENGTH_LAST_NAME = 3\nprivate val EMAIL_ADDRESS_REGEX =\n  Regex(\"\"\"[a-zA-Z0-9+._%\\-']{1,256}@[a-zA-Z0-9][a-zA-Z0-9\\-]{0,64}(\\.[a-zA-Z0-9][a-zA-Z0-9\\-]{0,25})+\"\"\")\n"
      }
    }
  ],
  "attributes": {
    "module": "MVI_Coroutines_Flow.domain.main",
    "inspectionName": "PrivatePropertyName"
  },
  "hash": "456c53fe737cbda6ea9233329fb57cec28d4f92bf0937ac36c46b0823ef1feed"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Property 'value' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "core/src/main/java/com/hoc/flowmvi/core/selfReference.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 34,
      "length": 5,
      "code": {
        "startLine": 9,
        "length": 5,
        "offset": 121,
        "surroundingCode": "// See https://kotlinlang.org/docs/inline-classes.html for more information.\n@JvmInline\nvalue class SelfReference<T>(val value: T) : ReadOnlyProperty<Any?, T> {\n  override fun getValue(thisRef: Any?, property: KProperty<*>): T = value\n}"
      }
    }
  ],
  "attributes": {
    "module": "MVI_Coroutines_Flow.core.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "288152ba8348cacc8e9b07ea11d3061b198d0ee50d59596311cdee2048af96b5"
}]}